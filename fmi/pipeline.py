# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/04_pipeline.ipynb (unless otherwise specified).

__all__ = ['dicom_windows', 'CustomPILDicom']

# Cell
from fastai.torch_basics import *
from fastai.data.all import *
from fastai.data.external import *

from fastai.medical.imaging import PILBase
from fastai.medical.imaging import *
from fastai.vision.all import *

import pydicom
from PIL import Image

# Cell
dicom_windows = types.SimpleNamespace(
    abdomen_soft=(400,50),
    brain=(80,40),
    brain_bone=(2800,600),
    brain_soft=(375,40),
    liver=(150,30),
    lungs=(1500,-600),
    mediastinum=(350,50),
    pe=(40,400),
    spine_soft=(250,50),
    spine_bone=(1800,400),
    subdural=(254,100),
    stroke=(8,32)
)

# Cell
class CustomPILDicom(PILDicom):
    "Customizable mode, window_args, integer_args arguments for PILDicom "
    def __init__(self, window_args ,integer_args, mode, h):
        self.window_args; self.integer_args; self.mode; self.h = window_args; integer_args; mode; h
    @classmethod
    def create(cls, fn:(Path, str, bytes), window_args=None, integer_args=np.uint16, mode='L')->None:
        if isinstance(fn,bytes): im = pydicom.dcmread(pydicom.filebase.DicomBytesIO(fn))
        if isinstance(fn,(Path,str)): im = pydicom.dcmread(fn)
        if window_args is not None:
            scaled = np.array(im.windowed(*self.window_args).numpy())*h
        else:
            scaled = np.array(im.pixel_array).astype(integer_args)*h
        pill_im = Image.fromarray(scaled)
        return cls(pill_im.convert(mode))