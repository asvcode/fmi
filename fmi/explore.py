# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_explore.ipynb (unless otherwise specified).

__all__ = ['instance_sort', 'instance_dcmread', 'instance_show', 'get_dicom_image']

# Cell
from fastai.vision.all import *
from fastai.medical.imaging import *
from torchvision.utils import save_image
matplotlib.rcParams['image.cmap'] = 'bone'

# Cell
def instance_sort(folder:(Path, L)):
    "Helper to sort files by instance number"
    if isinstance(folder, Path): folder = get_dicom_files(folder)
    if isinstance(folder, L): folder = folder
    sorted_files = []
    for file in folder:
        instance = dcmread(file)[0x20, 0x13].value
        sorted_files.append([instance, file])
    return L(sorted(sorted_files))

# Cell
def instance_dcmread(folder:(L)):
    "instance dcmread"
    file = [dcmread(o[1]) for o in folder]
    return file

# Cell
def instance_show(folder: (L), nrows=1):
    "Helper to display sorted files by instance number"
    f_list = []; t_list = []
    for file in instance_sort(folder):
        f = TensorDicom(dcmread(file[1]).pixel_array)
        f_list.append(f); t_list.append(file[0])
    return show_images(f_list, titles=t_list, nrows=nrows)

# Cell
def get_dicom_image(df, key, nrows=3, source=None):
    "Helper to view images by key"
    imgs=[]
    title=[]
    for i in df.index:
        file_path = f"{source}/{df.iloc[i]['PatientID']}/{df.iloc[i]['InstanceNumber']}.dcm"
        dcc = dcmread(file_path).pixel_array
        imgs.append(dcc)
        pct = df.iloc[i][key]
        title.append(pct)
    return show_images(imgs, titles=title, nrows=nrows)